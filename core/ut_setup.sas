%macro ut_setup(in_file=, in_name=);
/*
    Macro to set up the unit testing environment.
    To be run first and once.
    in_file:        path to the SAS program being tested
*/
    %global ut_err
            ut_macro_path ut_macro_name
            ut_grp_id ut_grp_desc
            ut_tst_seq ut_tst_id ut_tst_type ut_tst_desc ut_tst_exp_res ut_tst_res ut_tst_det
            ut_work_dir ut_log_file
            ut_cov ut_cov_file
    ;

    *-- Set framework status before testing input parameters --*;
    *-- Like this, if we exit for any reason, status will be erroneous --*;
    %let ut_err = 1;

    %if %sysevalf(%superq(in_file) =, boolean) %then %do;
        %put ERROR: IN_FILE is missing;
        %return;
    %end;

    %if not %sysfunc(fileexist("&in_file.")) %then %do;
        %put ERROR: IN_FILE does not exist;
        %return;
    %end;

    *-- Input parameters check completed, update framework erroneous state --*;
    %let ut_err = 0;

    *-- Store the path to the macro to be tested. Needed if ut_cov_init is invoked --*;
    %let ut_macro_path = %nrbquote(&in_file.);

    *-- Extract the name of the macro (either given or from file name) --*;
    %if %sysevalf(%superq(in_name) ne, boolean) %then   %let ut_macro_name = %nrbquote(&in_name.);
    %else                                               %let ut_macro_name = %sysfunc(prxchange(s/.*\/(.+)\..+$/$1/oi, -1, %nrbquote(&in_file.)));

    *--
        Unique identifier of a group of tests.
        Call to "ut_grp_init" increments increments its value by 1.
    --*;
    %let ut_grp_id = 0;

    *--
        Description of a group of tests.
        Value is set when invoking "ut_grp_init"
        Value is output in the validation report.
    --*;
    %let ut_grp_desc = ;

    *--
        Sequence of a test within a group of tests
        Call to "ut_grp_init" reset this value to 0
        Call to an assert function increase this value by 1
    --*;
    %let ut_tst_seq = 0;

    *--
        Unique identifier of a test.
        Call to an assert function derive this value ut_grp_id.ut_tst_seq
    --*;
    %let ut_tst_id = ;

    *--
        Type of test.
        Value is set when invoking an assert function
    --*;
    %let ut_tst_type = ;

    *--
        Description of a test.
        Value is set when invoking an assert function
        Value is output in the validation report.
    --*;
    %let ut_tst_desc = ;

    *-- Expected result of a test --*;
    %let ut_tst_exp_res = ;

    *-- Result of a test --*;
    %let ut_tst_res = ;

    *-- Details about the result of a test --*;
    %let ut_tst_det = ;

    *-- Get the SAS work directory (used as a temporary directory to store the SAS logs generated by ut_run) --*;
    %let ut_work_dir = %quote(%sysfunc(pathname(work)));
    *-- TODO: REMOVE --*;
    %let ut_work_dir = %quote(~/work);

    *-- Name of a file to store the SAS logs generated by ut_run --*;
    %let ut_log_file = dummy.log;

    *-- Flag to state if code coverage is enabled (1) or not (0) --*;
    %let ut_cov = 0;

    *-- Name of a file to store the modified SAS program amended for code coverage feature --*;
    %let ut_cov_file = coverage.sas;

    *--
        Dataset to store the results of the tests
        Each call to an assert function insert a record in this dataset
    --*;
    data _ut_results (drop = _i_);
        attrib  ut_grp_id   format=best.    label="Testing group ID"
                ut_grp_desc format=$200.    label="Testing group description"
                ut_tst_seq      format=best.    label="Test ordering value"
                ut_tst_id       format=$20.     label="Test ID"
                ut_tst_type     format=$30.     label="Test type"
                ut_tst_desc     format=$200.    label="Test description"
                ut_tst_exp_res  format=$10.     label="Expected test result"
                ut_tst_res      format=$10.     label="Test result"
                ut_tst_stat     format=$10.     label="Test status"
                ut_tst_det      format=$500.    label="Test details"
        ;

        set _null_;

        *-- Init all char variables --*;
        array my_chars[*] _character_;
        do _i_=1 to dim(my_chars);
            my_chars[_i_] = '';
        end;

        *-- Init all num variables --*;
        array my_nums[*] _numeric_;
        do _i_=1 to dim(my_nums);
            my_nums[_i_] = .;
        end;
    run;

    *-- Load the macro to be tested --*;
    %include "&in_file.";
%mend ut_setup;